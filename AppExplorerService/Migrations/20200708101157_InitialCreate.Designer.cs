// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppExplorerService.Migrations
{
    [DbContext(typeof(AppExplorerContext))]
    [Migration("20200708101157_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("App", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("App");
                });

            modelBuilder.Entity("AppLanguage", b =>
                {
                    b.Property<int>("AppId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("AppId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("AppLanguage");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Java"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Javascript"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Typescript"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HTML"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 7,
                            Name = "SCSS"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 9,
                            Name = "JQuery"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Bootstrap"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Asp.Net Core API"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Asp.Net Core MVC"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Asp.Net Core Razor"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Entity Framework Core"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = "admin",
                            Password = "password"
                        });
                });

            modelBuilder.Entity("App", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AppUrl", "Urls", b1 =>
                        {
                            b1.Property<int>("AppId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("ArticleUrl")
                                .HasColumnName("ArticleUrl")
                                .HasColumnType("varchar(255)")
                                .HasMaxLength(255)
                                .IsUnicode(false);

                            b1.Property<string>("DeployedUrl")
                                .HasColumnName("DeployedUrl")
                                .HasColumnType("varchar(255)")
                                .HasMaxLength(255)
                                .IsUnicode(false);

                            b1.Property<string>("DownloadUrl")
                                .HasColumnName("DownloadUrl")
                                .HasColumnType("varchar(255)")
                                .HasMaxLength(255)
                                .IsUnicode(false);

                            b1.Property<string>("LibUrl")
                                .HasColumnName("LibUrl")
                                .HasColumnType("varchar(255)")
                                .HasMaxLength(255)
                                .IsUnicode(false);

                            b1.Property<string>("SourceUrl")
                                .IsRequired()
                                .HasColumnName("SourceUrl")
                                .HasColumnType("varchar(255)")
                                .HasMaxLength(255)
                                .IsUnicode(false);

                            b1.HasKey("AppId");

                            b1.ToTable("App");

                            b1.WithOwner()
                                .HasForeignKey("AppId");
                        });
                });

            modelBuilder.Entity("AppLanguage", b =>
                {
                    b.HasOne("App", "App")
                        .WithMany("AppLanguages")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
